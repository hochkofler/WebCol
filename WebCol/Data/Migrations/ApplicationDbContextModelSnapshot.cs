// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebCol.Data;

#nullable disable

namespace WebCol.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ColumnaFaseMovil", b =>
                {
                    b.Property<string>("ColumnasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FasesMovilesId")
                        .HasColumnType("int");

                    b.HasKey("ColumnasId", "FasesMovilesId");

                    b.HasIndex("FasesMovilesId");

                    b.ToTable("ColumnaFaseMovil");
                });

            modelBuilder.Entity("WebCol.Models.Analisis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaOrigen")
                        .HasColumnType("int");

                    b.Property<string>("ColumnaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comportamiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Flujo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LoteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Ph")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PlatosFin")
                        .HasColumnType("int");

                    b.Property<int>("PlatosIni")
                        .HasColumnType("int");

                    b.Property<decimal>("PresionFin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PresionIni")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeOnly>("TiempoCorrida")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ColumnaId");

                    b.HasIndex("LoteId");

                    b.ToTable("Analisis");
                });

            modelBuilder.Entity("WebCol.Models.AsignacionColumna", b =>
                {
                    b.Property<int>("AsignacionColumnaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsignacionColumnaId"));

                    b.Property<string>("ColumnaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrincipioId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("AsignacionColumnaId");

                    b.HasIndex("ColumnaId");

                    b.HasIndex("ProductoId", "PrincipioId");

                    b.ToTable("AsignacionesColumnas");
                });

            modelBuilder.Entity("WebCol.Models.Columna", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Clase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaseEstacionaria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaEnMarcha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int");

                    b.Property<decimal>("PhMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PhMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PresionMax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.ToTable("Columnas");
                });

            modelBuilder.Entity("WebCol.Models.FaseMovil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FasesMoviles");
                });

            modelBuilder.Entity("WebCol.Models.Lote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVcto")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("TamanoObjetivo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("WebCol.Models.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("WebCol.Models.Principio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalisisId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalisisId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Principios");
                });

            modelBuilder.Entity("WebCol.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Registro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("WebCol.Models.ProductoPrincipio", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("PrincipioId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoPrincipioId")
                        .HasColumnType("int");

                    b.HasKey("ProductoId", "PrincipioId");

                    b.HasIndex("PrincipioId");

                    b.ToTable("ProductosPrincipios");
                });

            modelBuilder.Entity("WebCol.Models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("ColumnaFaseMovil", b =>
                {
                    b.HasOne("WebCol.Models.Columna", null)
                        .WithMany()
                        .HasForeignKey("ColumnasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCol.Models.FaseMovil", null)
                        .WithMany()
                        .HasForeignKey("FasesMovilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebCol.Models.Analisis", b =>
                {
                    b.HasOne("WebCol.Models.Columna", "Columnas")
                        .WithMany("Analisis")
                        .HasForeignKey("ColumnaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCol.Models.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Columnas");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("WebCol.Models.AsignacionColumna", b =>
                {
                    b.HasOne("WebCol.Models.Columna", "Columna")
                        .WithMany()
                        .HasForeignKey("ColumnaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCol.Models.ProductoPrincipio", "ProductoPrincipio")
                        .WithMany()
                        .HasForeignKey("ProductoId", "PrincipioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Columna");

                    b.Navigation("ProductoPrincipio");
                });

            modelBuilder.Entity("WebCol.Models.Columna", b =>
                {
                    b.HasOne("WebCol.Models.Modelo", "Modelo")
                        .WithMany("Columnas")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("WebCol.Models.Lote", b =>
                {
                    b.HasOne("WebCol.Models.Producto", "Producto")
                        .WithMany("Lotes")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("WebCol.Models.Modelo", b =>
                {
                    b.HasOne("WebCol.Models.Proveedor", "Proveedor")
                        .WithMany("Modelo")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("WebCol.Models.Principio", b =>
                {
                    b.HasOne("WebCol.Models.Analisis", null)
                        .WithMany("PrincipiosActivos")
                        .HasForeignKey("AnalisisId");

                    b.HasOne("WebCol.Models.Producto", null)
                        .WithMany("Principios")
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("WebCol.Models.ProductoPrincipio", b =>
                {
                    b.HasOne("WebCol.Models.Principio", "Principio")
                        .WithMany("ProductosPrincipios")
                        .HasForeignKey("PrincipioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebCol.Models.Producto", "Producto")
                        .WithMany("ProductosPrincipios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Principio");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("WebCol.Models.Analisis", b =>
                {
                    b.Navigation("PrincipiosActivos");
                });

            modelBuilder.Entity("WebCol.Models.Columna", b =>
                {
                    b.Navigation("Analisis");
                });

            modelBuilder.Entity("WebCol.Models.Modelo", b =>
                {
                    b.Navigation("Columnas");
                });

            modelBuilder.Entity("WebCol.Models.Principio", b =>
                {
                    b.Navigation("ProductosPrincipios");
                });

            modelBuilder.Entity("WebCol.Models.Producto", b =>
                {
                    b.Navigation("Lotes");

                    b.Navigation("Principios");

                    b.Navigation("ProductosPrincipios");
                });

            modelBuilder.Entity("WebCol.Models.Proveedor", b =>
                {
                    b.Navigation("Modelo");
                });
#pragma warning restore 612, 618
        }
    }
}
